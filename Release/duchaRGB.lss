
duchaRGB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000096c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000009e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00800060  00800060  000009e0  2**0
                  ALLOC
  3 .comment      00000012  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009f4  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 000000c8  00000000  00000000  00000a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   0000e350  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00001a7b  00000000  00000000  0000ee48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00001810  00000000  00000000  000108c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  000000b0  00000000  00000000  000120d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    0000fe16  00000000  00000000  00012184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 000007e4  00000000  00000000  00021f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00000b77  00000000  00000000  0002277e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000365a  00000000  00000000  000232f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000011c  00000000  00000000  0002694f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	6b c0       	rjmp	.+214    	; 0xd8 <__ctors_end>
   2:	84 c0       	rjmp	.+264    	; 0x10c <__bad_interrupt>
   4:	83 c0       	rjmp	.+262    	; 0x10c <__bad_interrupt>
   6:	82 c0       	rjmp	.+260    	; 0x10c <__bad_interrupt>
   8:	81 c0       	rjmp	.+258    	; 0x10c <__bad_interrupt>
   a:	80 c0       	rjmp	.+256    	; 0x10c <__bad_interrupt>
   c:	7f c0       	rjmp	.+254    	; 0x10c <__bad_interrupt>
   e:	7e c0       	rjmp	.+252    	; 0x10c <__bad_interrupt>
  10:	7d c0       	rjmp	.+250    	; 0x10c <__bad_interrupt>
  12:	7c c0       	rjmp	.+248    	; 0x10c <__bad_interrupt>
  14:	7b c0       	rjmp	.+246    	; 0x10c <__bad_interrupt>
  16:	7a c0       	rjmp	.+244    	; 0x10c <__bad_interrupt>
  18:	79 c0       	rjmp	.+242    	; 0x10c <__bad_interrupt>
  1a:	78 c0       	rjmp	.+240    	; 0x10c <__bad_interrupt>
  1c:	77 c0       	rjmp	.+238    	; 0x10c <__bad_interrupt>

0000001e <_ZL6colors>:
  1e:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
  2e:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
  3e:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
  4e:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
  5e:	ff 00 00 00 ff 00 2a 00 ff 00 55 00 ff 00 7f 00     ......*...U.....
  6e:	ff 00 aa 00 ff 00 d4 00 ff 00 ff 00 d4 2a d4 00     .............*..
  7e:	aa 55 aa 00 7f 7f 7f 00 55 aa 55 00 2a d4 2a 00     .U......U.U.*.*.
  8e:	00 ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00     ................
  9e:	00 ff 00 00 00 ff 00 00 00 ff 00 00 00 f5 2a 00     ..............*.
  ae:	00 eb 55 00 00 e1 7f 00 00 d7 aa 00 00 cd d4 00     ..U.............
  be:	00 c4 ff 00 00 9c ff 00 00 75 ff 00 00 4e ff 00     .........u...N..
  ce:	00 27 ff 00 00 00 ff 00                             .'......

000000d6 <__ctors_start>:
  d6:	f5 02       	muls	r31, r21

000000d8 <__ctors_end>:
  d8:	11 24       	eor	r1, r1
  da:	1f be       	out	0x3f, r1	; 63
  dc:	cf e5       	ldi	r28, 0x5F	; 95
  de:	d2 e0       	ldi	r29, 0x02	; 2
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_clear_bss>:
  e4:	20 e0       	ldi	r18, 0x00	; 0

000000e6 <.Loc.1>:
  e6:	a0 e6       	ldi	r26, 0x60	; 96

000000e8 <.Loc.2>:
  e8:	b0 e0       	ldi	r27, 0x00	; 0

000000ea <.Loc.3>:
  ea:	01 c0       	rjmp	.+2      	; 0xee <.Loc.5>

000000ec <.Loc.4>:
  ec:	1d 92       	st	X+, r1

000000ee <.Loc.5>:
  ee:	af 37       	cpi	r26, 0x7F	; 127

000000f0 <.Loc.6>:
  f0:	b2 07       	cpc	r27, r18

000000f2 <.Loc.7>:
  f2:	e1 f7       	brne	.-8      	; 0xec <.Loc.4>

000000f4 <__do_global_ctors>:
  f4:	10 e0       	ldi	r17, 0x00	; 0

000000f6 <.Loc.1>:
  f6:	cc e6       	ldi	r28, 0x6C	; 108

000000f8 <.Loc.2>:
  f8:	d0 e0       	ldi	r29, 0x00	; 0

000000fa <.Loc.3>:
  fa:	03 c0       	rjmp	.+6      	; 0x102 <.L__do_global_ctors_start>

000000fc <.L__do_global_ctors_loop>:
  fc:	21 97       	sbiw	r28, 0x01	; 1

000000fe <.Loc.5>:
  fe:	fe 01       	movw	r30, r28

00000100 <.Loc.6>:
 100:	9a d2       	rcall	.+1332   	; 0x636 <__tablejump2__>

00000102 <.L__do_global_ctors_start>:
 102:	cb 36       	cpi	r28, 0x6B	; 107

00000104 <.Loc.8>:
 104:	d1 07       	cpc	r29, r17

00000106 <.Loc.9>:
 106:	d1 f7       	brne	.-12     	; 0xfc <.L__do_global_ctors_loop>

00000108 <L0^A>:
 108:	85 d0       	rcall	.+266    	; 0x214 <main>
 10a:	2e c4       	rjmp	.+2140   	; 0x968 <_exit>

0000010c <__bad_interrupt>:
 10c:	79 cf       	rjmp	.-270    	; 0x0 <__vectors>

0000010e <_ZN12oneWireBus_c8readBitsEh.isra.0>:
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	28 0f       	add	r18, r24

00000112 <.Loc.2>:
 112:	31 e0       	ldi	r19, 0x01	; 1

00000114 <.Loc.3>:
 114:	80 e0       	ldi	r24, 0x00	; 0

00000116 <.L2>:
  _inline_ bitSelectorProxy_t(base_t& _target, cu8 _bitNumber) : target(_target), bitNumber(_bitNumber) { }

  _inline_ constexpr void operator=(u8 to) {
    if (sizeof(target) == 1) {
      if (to == 0) {
        target &= ~mBv(bitNumber); }
 116:	c0 98       	cbi	0x18, 0	; 24

00000118 <.LBB64>:
      else if (to == 1) {
        target |= mBv(bitNumber); }
 118:	b8 9a       	sbi	0x17, 0	; 23

0000011a <.LBB69>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	9d e0       	ldi	r25, 0x0D	; 13

0000011c <.L1^B1>:
 11c:	9a 95       	dec	r25
 11e:	f1 f7       	brne	.-4      	; 0x11c <.L1^B1>
	...

00000122 <.LBB71>:
 122:	c0 9a       	sbi	0x18, 0	; 24

00000124 <.LBB77>:
        target &= ~mBv(bitNumber); }
 124:	b8 98       	cbi	0x17, 0	; 23

00000126 <.LBB81>:
 126:	98 e2       	ldi	r25, 0x28	; 40

00000128 <.L1^B2>:
 128:	9a 95       	dec	r25
 12a:	f1 f7       	brne	.-4      	; 0x128 <.L1^B2>

0000012c <.LBB83>:
      else {
        ((u8*)&target) [bitNumber >> 3] ^= mBv(bitNumber & 0x07); } } }

  _inline_ operator bool( ) const {
    if (sizeof(target) == 1) {
      return (target & mBv(bitNumber)); }
 12c:	96 b3       	in	r25, 0x16	; 22

0000012e <.LBE83>:
		ow_pin.oupinLo();
		_delay_us(5);
		ow_pin.inpinPullUp();
		_delay_us(15);

		if (ow_pin){
 12e:	91 70       	andi	r25, 0x01	; 1
 130:	91 95       	neg	r25
 132:	93 23       	and	r25, r19
 134:	89 2b       	or	r24, r25

00000136 <.LBB87>:
 136:	92 e9       	ldi	r25, 0x92	; 146

00000138 <.L1^B3>:
 138:	9a 95       	dec	r25
 13a:	f1 f7       	brne	.-4      	; 0x138 <.L1^B3>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <L0^A>

0000013e <L0^A>:
			recive |= mask;}

		_delay_us(55);

		mask <<= 1;}
 13e:	33 0f       	add	r19, r19

00000140 <.Loc.22>:
	while(bits--) {
 140:	21 50       	subi	r18, 0x01	; 1
 142:	48 f7       	brcc	.-46     	; 0x116 <.L2>

00000144 <.Loc.23>:

	return recive;
}
 144:	08 95       	ret

00000146 <_ZN12oneWireBus_c9writeBitsEhh.isra.0>:
	while(bits--) {
 146:	61 50       	subi	r22, 0x01	; 1

00000148 <.L7>:
 148:	9d e0       	ldi	r25, 0x0D	; 13

0000014a <.L1^B4>:
 14a:	9a 95       	dec	r25
 14c:	f1 f7       	brne	.-4      	; 0x14a <.L1^B4>
	...

00000150 <.LBB162>:
        target &= ~mBv(bitNumber); }
 150:	c0 98       	cbi	0x18, 0	; 24

00000152 <.LBB168>:
        target |= mBv(bitNumber); }
 152:	b8 9a       	sbi	0x17, 0	; 23

00000154 <.LBE162>:
		if( send  & 0b1) {
 154:	80 ff       	sbrs	r24, 0
 156:	0e c0       	rjmp	.+28     	; 0x174 <.L5>

00000158 <.LBB173>:
 158:	9d e0       	ldi	r25, 0x0D	; 13

0000015a <.L1^B5>:
 15a:	9a 95       	dec	r25
 15c:	f1 f7       	brne	.-4      	; 0x15a <.L1^B5>
	...

00000160 <.LBB175>:
 160:	c0 9a       	sbi	0x18, 0	; 24

00000162 <.LBB181>:
        target &= ~mBv(bitNumber); }
 162:	b8 98       	cbi	0x17, 0	; 23

00000164 <.LBB185>:
 164:	92 e9       	ldi	r25, 0x92	; 146

00000166 <.L1^B6>:
 166:	9a 95       	dec	r25
 168:	f1 f7       	brne	.-4      	; 0x166 <.L1^B6>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <L0^A>

0000016c <L0^A>:
		send>>=1;
 16c:	86 95       	lsr	r24

0000016e <.Loc.42>:
	while(bits--) {
 16e:	61 50       	subi	r22, 0x01	; 1
 170:	58 f7       	brcc	.-42     	; 0x148 <.L7>

00000172 <.Loc.43>:
}
 172:	08 95       	ret

00000174 <.L5>:
 174:	92 e9       	ldi	r25, 0x92	; 146

00000176 <.L1^B7>:
 176:	9a 95       	dec	r25
 178:	f1 f7       	brne	.-4      	; 0x176 <.L1^B7>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <L0^A>

0000017c <L0^A>:
        target |= mBv(bitNumber); }
 17c:	c0 9a       	sbi	0x18, 0	; 24

0000017e <.LBB195>:
        target &= ~mBv(bitNumber); }
 17e:	b8 98       	cbi	0x17, 0	; 23

00000180 <.LBB199>:
 180:	9d e0       	ldi	r25, 0x0D	; 13

00000182 <.L1^B8>:
 182:	9a 95       	dec	r25
 184:	f1 f7       	brne	.-4      	; 0x182 <.L1^B8>
	...

00000188 <.Loc.51>:
	}
	else
		__ticks = (uint8_t)__tmp;
	_delay_loop_1(__ticks);
#endif
}
 188:	f1 cf       	rjmp	.-30     	; 0x16c <L0^A>

0000018a <_ZN11genericIO_cI12oneWireBus_cE3TxsEPhh.isra.0>:
  auto & Rxs(u8 * data, const u8 sz) {
    for( iRange(sz) ) {
      (data)[i] = (static_cast<derived_t*>(this))->Rx(); }
    return (static_cast<derived_t&>(mSelf)); }

  auto & Txs(u8 * data, const u8 sz) {
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29

00000192 <.LVL32>:
 192:	eb 01       	movw	r28, r22
 194:	8b 01       	movw	r16, r22
 196:	04 0f       	add	r16, r20
 198:	11 1d       	adc	r17, r1

0000019a <.L10>:
			Reset= 480,};

		u8 lastDiscrepancy;

		void Tx ( cu8 b ) {
			writeBits ( b );}
 19a:	68 e0       	ldi	r22, 0x08	; 8
 19c:	89 91       	ld	r24, Y+

0000019e <.Loc.56>:
 19e:	d3 df       	rcall	.-90     	; 0x146 <_ZN12oneWireBus_c9writeBitsEhh.isra.0>

000001a0 <.LBE206>:
    for( iRange(sz) ) {
 1a0:	c0 17       	cp	r28, r16
 1a2:	d1 07       	cpc	r29, r17
 1a4:	d1 f7       	brne	.-12     	; 0x19a <.L10>

000001a6 <.LBE205>:
      (static_cast<derived_t*>(this))->Tx(data[i]); };
    return (static_cast<derived_t&>(mSelf)); }
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28

000001aa <.Loc.60>:
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	08 95       	ret

000001b0 <_ZN12oneWireBus_c5resetEv.isra.0>:
 1b0:	c0 98       	cbi	0x18, 0	; 24

000001b2 <.LBB259>:
        target |= mBv(bitNumber); }
 1b2:	b8 9a       	sbi	0x17, 0	; 23

000001b4 <.LBB264>:
	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	8f eb       	ldi	r24, 0xBF	; 191
 1b6:	93 e0       	ldi	r25, 0x03	; 3

000001b8 <.L1^B9>:
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <.L1^B9>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <L0^A>

000001be <L0^A>:
	...

000001c0 <.LBB266>:
 1c0:	c0 9a       	sbi	0x18, 0	; 24

000001c2 <.LBB272>:
        target &= ~mBv(bitNumber); }
 1c2:	b8 98       	cbi	0x17, 0	; 23

000001c4 <.LBB276>:
 1c4:	8f eb       	ldi	r24, 0xBF	; 191
 1c6:	93 e0       	ldi	r25, 0x03	; 3

000001c8 <.L1^B10>:
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <.L1^B10>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <L0^A>

000001ce <L0^A>:
	...

000001d0 <.LBE276>:
	_delay_us(480);}
 1d0:	08 95       	ret

000001d2 <_ZN12oneWireBus_c3cmdEhb.constprop.0>:

void oneWireBus_c::cmd(cu8 c, bool romSkip) {
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <L0^A>

000001d8 <L0^A>:
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
 1dc:	8a 83       	std	Y+2, r24	; 0x02

000001de <.Loc.77>:

	reset();
 1de:	e8 df       	rcall	.-48     	; 0x1b0 <_ZN12oneWireBus_c5resetEv.isra.0>

000001e0 <.LVL46>:

	if( romSkip ) {
		mSelf << cmds::SkipROM;}
	else {
		mSelf << cmds::MatchROM;
 1e0:	85 e5       	ldi	r24, 0x55	; 85
 1e2:	89 83       	std	Y+1, r24	; 0x01

000001e4 <.LBB284>:
    (static_cast<derived_t*>(this))->Txs((u8*)(&data), sizeof(data));
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	be 01       	movw	r22, r28
 1e8:	6f 5f       	subi	r22, 0xFF	; 255
 1ea:	7f 4f       	sbci	r23, 0xFF	; 255
 1ec:	80 e6       	ldi	r24, 0x60	; 96
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	cc df       	rcall	.-104    	; 0x18a <_ZN11genericIO_cI12oneWireBus_cE3TxsEPhh.isra.0>

000001f2 <.LBB286>:
 1f2:	48 e0       	ldi	r20, 0x08	; 8
 1f4:	60 e6       	ldi	r22, 0x60	; 96
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	cb 01       	movw	r24, r22
 1fa:	c7 df       	rcall	.-114    	; 0x18a <_ZN11genericIO_cI12oneWireBus_cE3TxsEPhh.isra.0>

000001fc <.LBB288>:
 1fc:	41 e0       	ldi	r20, 0x01	; 1
 1fe:	be 01       	movw	r22, r28
 200:	6e 5f       	subi	r22, 0xFE	; 254
 202:	7f 4f       	sbci	r23, 0xFF	; 255
 204:	80 e6       	ldi	r24, 0x60	; 96
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	c0 df       	rcall	.-128    	; 0x18a <_ZN11genericIO_cI12oneWireBus_cE3TxsEPhh.isra.0>

0000020a <.LBE288>:
		mSelf << targetID;}
	mSelf << c;}
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <main>:

void delay_ms(u16 ms) {
  while( ms-- ) {
    _delay_ms(1); } }

int main() {
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	6b 97       	sbiw	r28, 0x1b	; 27
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	f8 94       	cli
 21e:	de bf       	out	0x3e, r29	; 62
 220:	0f be       	out	0x3f, r0	; 63
 222:	cd bf       	out	0x3d, r28	; 61

00000224 <.LBB538>:
#include "ds18b20.hpp"

const u16 tConv = 93;

void DS18B20::begin(cu8 _resolutionBits){
	resolutionBits = _resolutionBits;
 224:	89 e0       	ldi	r24, 0x09	; 9
 226:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <_ZL10tempSensor>

0000022a <.LBB542>:
        target |= mBv(bitNumber); }
 22a:	c0 9a       	sbi	0x18, 0	; 24

0000022c <.LBB551>:
        target &= ~mBv(bitNumber); }
 22c:	b8 98       	cbi	0x17, 0	; 23

0000022e <.L15>:
	while( ow_pin.isLo() );}
 22e:	b0 9b       	sbis	0x16, 0	; 22
 230:	fe cf       	rjmp	.-4      	; 0x22e <.L15>

00000232 <.LBB555>:

bool oneWireBus_c::romSearchNext() {
	bool searchDirection;
	bool cur_bit, n_cur_bit, lastBit;

	reset();
 232:	be df       	rcall	.-132    	; 0x1b0 <_ZN12oneWireBus_c5resetEv.isra.0>

00000234 <.LVL56>:

	mSelf << cmds::SearchROM;
 234:	80 ef       	ldi	r24, 0xF0	; 240
 236:	89 83       	std	Y+1, r24	; 0x01

00000238 <.LBB557>:
 238:	41 e0       	ldi	r20, 0x01	; 1
 23a:	be 01       	movw	r22, r28
 23c:	6f 5f       	subi	r22, 0xFF	; 255
 23e:	7f 4f       	sbci	r23, 0xFF	; 255
 240:	80 e6       	ldi	r24, 0x60	; 96
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	a2 df       	rcall	.-188    	; 0x18a <_ZN11genericIO_cI12oneWireBus_cE3TxsEPhh.isra.0>

00000246 <.LBB559>:
	for( iRange(64) ) {
 246:	10 e0       	ldi	r17, 0x00	; 0

00000248 <.LBB560>:

static constexpr bool Off = false;
static constexpr bool On = true;

constexpr auto mBv(cu8 bit) {
	return (1L << bit);}
 248:	c1 2c       	mov	r12, r1
 24a:	d1 2c       	mov	r13, r1
 24c:	76 01       	movw	r14, r12
 24e:	c3 94       	inc	r12

00000250 <.L23>:

		cur_bit= readBits(1);
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	5d df       	rcall	.-326    	; 0x10e <_ZN12oneWireBus_c8readBitsEh.isra.0>

00000254 <.LVL60>:
 254:	b8 2e       	mov	r11, r24

00000256 <.Loc.107>:
 256:	01 e0       	ldi	r16, 0x01	; 1
 258:	81 11       	cpse	r24, r1
 25a:	01 c0       	rjmp	.+2      	; 0x25e <.L16>
 25c:	00 e0       	ldi	r16, 0x00	; 0

0000025e <.L16>:
		n_cur_bit= readBits(1);
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	56 df       	rcall	.-340    	; 0x10e <_ZN12oneWireBus_c8readBitsEh.isra.0>

00000262 <.LVL62>:
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	81 11       	cpse	r24, r1
 266:	01 c0       	rjmp	.+2      	; 0x26a <.L18>
 268:	90 e0       	ldi	r25, 0x00	; 0

0000026a <.L18>:

		if( (cur_bit == n_cur_bit) == 1 ) {
 26a:	09 13       	cpse	r16, r25
 26c:	8a c1       	rjmp	.+788    	; 0x582 <.L17>

0000026e <.L24>:
	ow_bus.begin();
	ow_bus.romSearchNext();
	myID = ow_bus.targetID;
 26e:	88 e0       	ldi	r24, 0x08	; 8
 270:	e0 e6       	ldi	r30, 0x60	; 96
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	a7 e7       	ldi	r26, 0x77	; 119
 276:	b0 e0       	ldi	r27, 0x00	; 0

00000278 <.L0^B1>:
 278:	01 90       	ld	r0, Z+
 27a:	0d 92       	st	X+, r0
 27c:	8a 95       	dec	r24
 27e:	e1 f7       	brne	.-8      	; 0x278 <.L0^B1>

00000280 <.Loc.113>:
	setResolution(resolutionBits);
 280:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <_ZL10tempSensor>

00000284 <.LBB572>:
void setup();
int main();
void loop();

inline u8 * memset(auto & what, cu8 to) {
	return (u8*) memset(&what, to, sizeof(what));}
 284:	ee e6       	ldi	r30, 0x6E	; 110
 286:	f0 e0       	ldi	r31, 0x00	; 0

00000288 <.LVL65>:
 288:	99 e0       	ldi	r25, 0x09	; 9
 28a:	df 01       	movw	r26, r30

0000028c <.L0^B2>:
 28c:	1d 92       	st	X+, r1
 28e:	9a 95       	dec	r25
 290:	e9 f7       	brne	.-6      	; 0x28c <.L0^B2>

00000292 <.LBE574>:
	return u16(scratchpad.bytes[1] << 8 | scratchpad.bytes[0]) >> 4;
}

void DS18B20::setResolution ( cu8 bits ) {
	zeromem(scratchpad);
	if ((bits> 12) || (bits < 9)){
 292:	89 50       	subi	r24, 0x09	; 9

00000294 <.Loc.121>:
 294:	84 30       	cpi	r24, 0x04	; 4
 296:	d8 f4       	brcc	.+54     	; 0x2ce <.L19>

00000298 <.Loc.122>:
		return;}

	scratchpad.R = bits - 9;
 298:	83 70       	andi	r24, 0x03	; 3
 29a:	82 95       	swap	r24
 29c:	88 0f       	add	r24, r24
 29e:	80 7e       	andi	r24, 0xE0	; 224
 2a0:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <_ZL10tempSensor+0x5>
 2a4:	9f 79       	andi	r25, 0x9F	; 159
 2a6:	89 2b       	or	r24, r25
 2a8:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <_ZL10tempSensor+0x5>

000002ac <.LBB577>:
struct AddressOperatorMixin {

  address_t targetID;

  derived_t & operator [] (const address_t & newID ) {
    targetID = newID;
 2ac:	88 e0       	ldi	r24, 0x08	; 8
 2ae:	e7 e7       	ldi	r30, 0x77	; 119
 2b0:	f0 e0       	ldi	r31, 0x00	; 0

000002b2 <.LVL69>:
 2b2:	a0 e6       	ldi	r26, 0x60	; 96
 2b4:	b0 e0       	ldi	r27, 0x00	; 0

000002b6 <.L0^B3>:
 2b6:	01 90       	ld	r0, Z+
 2b8:	0d 92       	st	X+, r0
 2ba:	8a 95       	dec	r24
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <.L0^B3>

000002be <.LBB579>:

		u8 Rx ( ) {
			return readBits ( );}

		oneWireBus_c & operator () ( cu8 c, bool romSkip= false ) {
			cmd ( c, romSkip );
 2be:	8e e4       	ldi	r24, 0x4E	; 78
 2c0:	88 df       	rcall	.-240    	; 0x1d2 <_ZN12oneWireBus_c3cmdEhb.constprop.0>

000002c2 <.LBB581>:
    (static_cast<derived_t*>(this))->Txs((u8*)(&data), sizeof(data));
 2c2:	49 e0       	ldi	r20, 0x09	; 9
 2c4:	6e e6       	ldi	r22, 0x6E	; 110
 2c6:	70 e0       	ldi	r23, 0x00	; 0

000002c8 <.LVL72>:
 2c8:	80 e6       	ldi	r24, 0x60	; 96
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	5e df       	rcall	.-324    	; 0x18a <_ZN11genericIO_cI12oneWireBus_cE3TxsEPhh.isra.0>

000002ce <.L19>:
        target |= mBv(bitNumber); }
 2ce:	b9 9a       	sbi	0x17, 1	; 23

000002d0 <.LBB592>:
#include <device/device.hpp>

class analog_c{
public:
	void begin() {
	  ADCSRA = aden;
 2d0:	80 e8       	ldi	r24, 0x80	; 128
 2d2:	86 b9       	out	0x06, r24	; 6

000002d4 <.LBB594>:
	  ADMUX = refs1 + mux0 + mux1 + mux2 + mux3;}
 2d4:	8f e8       	ldi	r24, 0x8F	; 143
 2d6:	87 b9       	out	0x07, r24	; 7

000002d8 <.LBB604>:
    :base_addr((cu8*)&base) {};

  _inline_ array_element_t operator[](const u8 index) {
    const u8 * flash_p = base_addr + size * index;
    array_element_t holder;
    memcpy_P(&holder, flash_p, size);
 2d8:	ae 01       	movw	r20, r28
 2da:	4f 5f       	subi	r20, 0xFF	; 255
 2dc:	5f 4f       	sbci	r21, 0xFF	; 255
 2de:	5e 83       	std	Y+6, r21	; 0x06
 2e0:	4d 83       	std	Y+5, r20	; 0x05

000002e2 <.L36>:
    targetID = newID;
 2e2:	88 e0       	ldi	r24, 0x08	; 8
 2e4:	e7 e7       	ldi	r30, 0x77	; 119
 2e6:	f0 e0       	ldi	r31, 0x00	; 0

000002e8 <.LVL77>:
 2e8:	a0 e6       	ldi	r26, 0x60	; 96
 2ea:	b0 e0       	ldi	r27, 0x00	; 0

000002ec <.L0^B4>:
 2ec:	01 90       	ld	r0, Z+
 2ee:	0d 92       	st	X+, r0
 2f0:	8a 95       	dec	r24
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <.L0^B4>

000002f4 <.LBB614>:
 2f4:	8e eb       	ldi	r24, 0xBE	; 190
 2f6:	6d df       	rcall	.-294    	; 0x1d2 <_ZN12oneWireBus_c3cmdEhb.constprop.0>

000002f8 <.LBB617>:
  auto & Rxs(u8 * data, const u8 sz) {
 2f8:	4e e6       	ldi	r20, 0x6E	; 110
 2fa:	e4 2e       	mov	r14, r20
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	f4 2e       	mov	r15, r20

00000300 <.LVL80>:
 300:	87 01       	movw	r16, r14

00000302 <.L25>:
			return readBits ( );}
 302:	88 e0       	ldi	r24, 0x08	; 8
 304:	04 df       	rcall	.-504    	; 0x10e <_ZN12oneWireBus_c8readBitsEh.isra.0>

00000306 <.LBE620>:
      (data)[i] = (static_cast<derived_t*>(this))->Rx(); }
 306:	d8 01       	movw	r26, r16
 308:	8d 93       	st	X+, r24
 30a:	8d 01       	movw	r16, r26

0000030c <.Loc.187>:
    for( iRange(sz) ) {
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	07 37       	cpi	r16, 0x77	; 119
 310:	1b 07       	cpc	r17, r27
 312:	b9 f7       	brne	.-18     	; 0x302 <.L25>

00000314 <.LBB625>:
    targetID = newID;
 314:	88 e0       	ldi	r24, 0x08	; 8
 316:	e7 e7       	ldi	r30, 0x77	; 119
 318:	f0 e0       	ldi	r31, 0x00	; 0

0000031a <.LVL85>:
 31a:	a0 e6       	ldi	r26, 0x60	; 96
 31c:	b0 e0       	ldi	r27, 0x00	; 0

0000031e <.L0^B5>:
 31e:	01 90       	ld	r0, Z+
 320:	0d 92       	st	X+, r0
 322:	8a 95       	dec	r24
 324:	e1 f7       	brne	.-8      	; 0x31e <.L0^B5>

00000326 <.LBB627>:
			cmd ( c, romSkip );
 326:	84 e4       	ldi	r24, 0x44	; 68
 328:	54 df       	rcall	.-344    	; 0x1d2 <_ZN12oneWireBus_c3cmdEhb.constprop.0>

0000032a <.LBE627>:
	delay_ms(tConv	* ((resolutionBits-9) >> 2));
 32a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <_ZL10tempSensor>

0000032e <.Loc.195>:
 32e:	89 50       	subi	r24, 0x09	; 9
 330:	99 0b       	sbc	r25, r25

00000332 <.Loc.196>:
 332:	95 95       	asr	r25
 334:	87 95       	ror	r24
 336:	95 95       	asr	r25
 338:	87 95       	ror	r24
 33a:	6d e5       	ldi	r22, 0x5D	; 93
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	6a d1       	rcall	.+724    	; 0x614 <__mulhi3>
 340:	8c 01       	movw	r16, r24

00000342 <.L26>:
  while( ms-- ) {
 342:	01 15       	cp	r16, r1
 344:	11 05       	cpc	r17, r1
 346:	09 f0       	breq	.+2      	; 0x34a <.LBB634>

00000348 <L0^A>:
 348:	43 c1       	rjmp	.+646    	; 0x5d0 <.L27>

0000034a <.LBB634>:
 34a:	88 e0       	ldi	r24, 0x08	; 8
 34c:	e7 e7       	ldi	r30, 0x77	; 119
 34e:	f0 e0       	ldi	r31, 0x00	; 0

00000350 <.LVL90>:
 350:	a0 e6       	ldi	r26, 0x60	; 96
 352:	b0 e0       	ldi	r27, 0x00	; 0

00000354 <.L0^B6>:
 354:	01 90       	ld	r0, Z+
 356:	0d 92       	st	X+, r0
 358:	8a 95       	dec	r24
 35a:	e1 f7       	brne	.-8      	; 0x354 <.L0^B6>

0000035c <.LBB636>:
 35c:	8e eb       	ldi	r24, 0xBE	; 190
 35e:	39 df       	rcall	.-398    	; 0x1d2 <_ZN12oneWireBus_c3cmdEhb.constprop.0>

00000360 <.L28>:
			return readBits ( );}
 360:	88 e0       	ldi	r24, 0x08	; 8
 362:	d5 de       	rcall	.-598    	; 0x10e <_ZN12oneWireBus_c8readBitsEh.isra.0>

00000364 <.LBE641>:
      (data)[i] = (static_cast<derived_t*>(this))->Rx(); }
 364:	d7 01       	movw	r26, r14
 366:	8d 93       	st	X+, r24
 368:	7d 01       	movw	r14, r26

0000036a <.Loc.213>:
    for( iRange(sz) ) {
 36a:	b7 e7       	ldi	r27, 0x77	; 119
 36c:	eb 16       	cp	r14, r27
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	fb 06       	cpc	r15, r27
 372:	b1 f7       	brne	.-20     	; 0x360 <.L28>

00000374 <.LBB646>:
	return u16(scratchpad.bytes[1] << 8 | scratchpad.bytes[0]) >> 4;
 374:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <_ZL10tempSensor+0x1>
 378:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <_ZL10tempSensor+0x2>
 37c:	24 e0       	ldi	r18, 0x04	; 4

0000037e <.L1^B11>:
 37e:	76 95       	lsr	r23
 380:	67 95       	ror	r22
 382:	2a 95       	dec	r18
 384:	e1 f7       	brne	.-8      	; 0x37e <.L1^B11>

00000386 <.LBB649>:
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 386:	6e 32       	cpi	r22, 0x2E	; 46
 388:	0c f4       	brge	.+2      	; 0x38c <L0^A+0x2>

0000038a <L0^A>:
 38a:	2b c1       	rjmp	.+598    	; 0x5e2 <.L29>
 38c:	6d e2       	ldi	r22, 0x2D	; 45

0000038e <.L30>:
    const u8 * flash_p = base_addr + size * index;
 38e:	06 2e       	mov	r0, r22
 390:	00 0c       	add	r0, r0
 392:	77 0b       	sbc	r23, r23

00000394 <.Loc.223>:
 394:	66 0f       	add	r22, r22
 396:	77 1f       	adc	r23, r23
 398:	66 0f       	add	r22, r22
 39a:	77 1f       	adc	r23, r23

0000039c <.Loc.224>:
 39c:	62 5e       	subi	r22, 0xE2	; 226
 39e:	7f 4f       	sbci	r23, 0xFF	; 255

000003a0 <.Loc.225>:
    memcpy_P(&holder, flash_p, size);
 3a0:	44 e0       	ldi	r20, 0x04	; 4
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	ce 01       	movw	r24, r28
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	4c d1       	rcall	.+664    	; 0x642 <memcpy_P>

000003aa <.LVL96>:
    return *(array_element_t*)&holder; } };
 3aa:	29 80       	ldd	r2, Y+1	; 0x01
 3ac:	ea 81       	ldd	r30, Y+2	; 0x02
 3ae:	ef 83       	std	Y+7, r30	; 0x07
 3b0:	fb 81       	ldd	r31, Y+3	; 0x03
 3b2:	f8 87       	std	Y+8, r31	; 0x08
 3b4:	2c 81       	ldd	r18, Y+4	; 0x04
 3b6:	2f 87       	std	Y+15, r18	; 0x0f

000003b8 <.LBB652>:
void softUpdate(color_t new_color) {
	color_t intermediate;
	const u8 steps = 64;
	float r,g,b;

	float dr = (float)(new_color.r - last_color.r) / (float)steps;
 3b8:	4e 2f       	mov	r20, r30
 3ba:	50 e0       	ldi	r21, 0x00	; 0
 3bc:	5a 87       	std	Y+10, r21	; 0x0a
 3be:	49 87       	std	Y+9, r20	; 0x09

000003c0 <.Loc.235>:
	float dg = (float)(new_color.g - last_color.g) / (float)steps;
 3c0:	8f 2f       	mov	r24, r31
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	9c 87       	std	Y+12, r25	; 0x0c
 3c6:	8b 87       	std	Y+11, r24	; 0x0b

000003c8 <.Loc.236>:
	float db = (float)(new_color.b - last_color.b) / (float)steps;
 3c8:	a2 2d       	mov	r26, r2
 3ca:	b0 e0       	ldi	r27, 0x00	; 0
 3cc:	be 87       	std	Y+14, r27	; 0x0e
 3ce:	ad 87       	std	Y+13, r26	; 0x0d

000003d0 <.L34>:
	float dr = (float)(new_color.r - last_color.r) / (float)steps;
 3d0:	f0 90 6a 00 	lds	r15, 0x006A	; 0x80006a <last_color+0x1>

000003d4 <.Loc.245>:
 3d4:	69 85       	ldd	r22, Y+9	; 0x09
 3d6:	7a 85       	ldd	r23, Y+10	; 0x0a
 3d8:	6f 19       	sub	r22, r15
 3da:	71 09       	sbc	r23, r1

000003dc <.Loc.246>:
 3dc:	07 2e       	mov	r0, r23
 3de:	00 0c       	add	r0, r0
 3e0:	88 0b       	sbc	r24, r24
 3e2:	99 0b       	sbc	r25, r25
 3e4:	ca d1       	rcall	.+916    	; 0x77a <__floatsisf>

000003e6 <.LVL99>:
 3e6:	20 e0       	ldi	r18, 0x00	; 0
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	40 e8       	ldi	r20, 0x80	; 128
 3ec:	5c e3       	ldi	r21, 0x3C	; 60
 3ee:	51 d2       	rcall	.+1186   	; 0x892 <__mulsf3>

000003f0 <.LVL100>:
 3f0:	68 8b       	std	Y+16, r22	; 0x10
 3f2:	79 8b       	std	Y+17, r23	; 0x11
 3f4:	8a 8b       	std	Y+18, r24	; 0x12
 3f6:	9b 8b       	std	Y+19, r25	; 0x13

000003f8 <.LVL101>:
	float dg = (float)(new_color.g - last_color.g) / (float)steps;
 3f8:	a0 90 6b 00 	lds	r10, 0x006B	; 0x80006b <last_color+0x2>

000003fc <.Loc.250>:
 3fc:	6b 85       	ldd	r22, Y+11	; 0x0b
 3fe:	7c 85       	ldd	r23, Y+12	; 0x0c

00000400 <.Loc.251>:
 400:	6a 19       	sub	r22, r10
 402:	71 09       	sbc	r23, r1

00000404 <.Loc.252>:
 404:	07 2e       	mov	r0, r23
 406:	00 0c       	add	r0, r0
 408:	88 0b       	sbc	r24, r24
 40a:	99 0b       	sbc	r25, r25
 40c:	b6 d1       	rcall	.+876    	; 0x77a <__floatsisf>

0000040e <.LVL103>:
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	40 e8       	ldi	r20, 0x80	; 128
 414:	5c e3       	ldi	r21, 0x3C	; 60
 416:	3d d2       	rcall	.+1146   	; 0x892 <__mulsf3>

00000418 <.LVL104>:
 418:	6c 8b       	std	Y+20, r22	; 0x14
 41a:	7d 8b       	std	Y+21, r23	; 0x15
 41c:	8e 8b       	std	Y+22, r24	; 0x16
 41e:	9f 8b       	std	Y+23, r25	; 0x17

00000420 <.LVL105>:
	float db = (float)(new_color.b - last_color.b) / (float)steps;
 420:	b0 90 69 00 	lds	r11, 0x0069	; 0x800069 <last_color>

00000424 <.Loc.256>:
 424:	6d 85       	ldd	r22, Y+13	; 0x0d
 426:	7e 85       	ldd	r23, Y+14	; 0x0e

00000428 <.Loc.257>:
 428:	6b 19       	sub	r22, r11
 42a:	71 09       	sbc	r23, r1

0000042c <.Loc.258>:
 42c:	07 2e       	mov	r0, r23
 42e:	00 0c       	add	r0, r0
 430:	88 0b       	sbc	r24, r24
 432:	99 0b       	sbc	r25, r25
 434:	a2 d1       	rcall	.+836    	; 0x77a <__floatsisf>

00000436 <.LVL107>:
 436:	20 e0       	ldi	r18, 0x00	; 0
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	40 e8       	ldi	r20, 0x80	; 128
 43c:	5c e3       	ldi	r21, 0x3C	; 60
 43e:	29 d2       	rcall	.+1106   	; 0x892 <__mulsf3>

00000440 <.LVL108>:
 440:	68 8f       	std	Y+24, r22	; 0x18
 442:	79 8f       	std	Y+25, r23	; 0x19
 444:	8a 8f       	std	Y+26, r24	; 0x1a
 446:	9b 8f       	std	Y+27, r25	; 0x1b

00000448 <.LVL109>:

	r = last_color.r;
 448:	6f 2d       	mov	r22, r15

0000044a <.Loc.262>:
 44a:	70 e0       	ldi	r23, 0x00	; 0

0000044c <.Loc.263>:
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	90 e0       	ldi	r25, 0x00	; 0

00000450 <.Loc.264>:
 450:	92 d1       	rcall	.+804    	; 0x776 <__floatunsisf>

00000452 <.LVL113>:
 452:	6b 01       	movw	r12, r22
 454:	7c 01       	movw	r14, r24

00000456 <.LVL114>:
	g = last_color.g;
 456:	6a 2d       	mov	r22, r10
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	8b d1       	rcall	.+790    	; 0x776 <__floatunsisf>

00000460 <.LVL115>:
 460:	2b 01       	movw	r4, r22
 462:	3c 01       	movw	r6, r24

00000464 <.LVL116>:
	b = last_color.b;
 464:	6b 2d       	mov	r22, r11
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	84 d1       	rcall	.+776    	; 0x776 <__floatunsisf>

0000046e <.LVL117>:
 46e:	4b 01       	movw	r8, r22
 470:	5c 01       	movw	r10, r24

00000472 <.LBB656>:
 472:	80 e4       	ldi	r24, 0x40	; 64
 474:	38 2e       	mov	r3, r24

00000476 <.L31>:
	__builtin_avr_delay_cycles(__ticks_dc);
 476:	8f ec       	ldi	r24, 0xCF	; 207
 478:	97 e0       	ldi	r25, 0x07	; 7

0000047a <.L1^B12>:
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <.L1^B12>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <L0^A>

00000480 <L0^A>:
	...

00000482 <.Loc.283>:
 482:	af ec       	ldi	r26, 0xCF	; 207
 484:	b7 e0       	ldi	r27, 0x07	; 7

00000486 <.L1^B13>:
 486:	11 97       	sbiw	r26, 0x01	; 1
 488:	f1 f7       	brne	.-4      	; 0x486 <.L1^B13>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <L0^A>

0000048c <L0^A>:
	...

0000048e <.Loc.294>:
 48e:	ef ec       	ldi	r30, 0xCF	; 207
 490:	f7 e0       	ldi	r31, 0x07	; 7

00000492 <.L1^B14>:
 492:	31 97       	sbiw	r30, 0x01	; 1
 494:	f1 f7       	brne	.-4      	; 0x492 <.L1^B14>
 496:	00 c0       	rjmp	.+0      	; 0x498 <L0^A>

00000498 <L0^A>:
	...

0000049a <.Loc.305>:
 49a:	8f ec       	ldi	r24, 0xCF	; 207
 49c:	97 e0       	ldi	r25, 0x07	; 7

0000049e <.L1^B15>:
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	f1 f7       	brne	.-4      	; 0x49e <.L1^B15>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <L0^A>

000004a4 <L0^A>:
	...

000004a6 <.Loc.316>:
 4a6:	af ec       	ldi	r26, 0xCF	; 207
 4a8:	b7 e0       	ldi	r27, 0x07	; 7

000004aa <.L1^B16>:
 4aa:	11 97       	sbiw	r26, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <.L1^B16>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <L0^A>

000004b0 <L0^A>:
	...

000004b2 <.LBE657>:
	for(iRange(steps)) {
		delay_ms(5);
		r += dr;
 4b2:	28 89       	ldd	r18, Y+16	; 0x10
 4b4:	39 89       	ldd	r19, Y+17	; 0x11
 4b6:	4a 89       	ldd	r20, Y+18	; 0x12
 4b8:	5b 89       	ldd	r21, Y+19	; 0x13
 4ba:	b6 01       	movw	r22, r12
 4bc:	c7 01       	movw	r24, r14
 4be:	cb d0       	rcall	.+406    	; 0x656 <__addsf3>

000004c0 <.LVL125>:
 4c0:	6b 01       	movw	r12, r22

000004c2 <.Loc.332>:
 4c2:	7c 01       	movw	r14, r24

000004c4 <.Loc.333>:
		g += dg;
 4c4:	2c 89       	ldd	r18, Y+20	; 0x14
 4c6:	3d 89       	ldd	r19, Y+21	; 0x15
 4c8:	4e 89       	ldd	r20, Y+22	; 0x16
 4ca:	5f 89       	ldd	r21, Y+23	; 0x17
 4cc:	b2 01       	movw	r22, r4
 4ce:	c3 01       	movw	r24, r6
 4d0:	c2 d0       	rcall	.+388    	; 0x656 <__addsf3>

000004d2 <.LVL128>:
 4d2:	2b 01       	movw	r4, r22

000004d4 <.Loc.335>:
 4d4:	3c 01       	movw	r6, r24

000004d6 <.Loc.336>:
		b += db;
 4d6:	28 8d       	ldd	r18, Y+24	; 0x18
 4d8:	39 8d       	ldd	r19, Y+25	; 0x19
 4da:	4a 8d       	ldd	r20, Y+26	; 0x1a
 4dc:	5b 8d       	ldd	r21, Y+27	; 0x1b
 4de:	b4 01       	movw	r22, r8
 4e0:	c5 01       	movw	r24, r10
 4e2:	b9 d0       	rcall	.+370    	; 0x656 <__addsf3>

000004e4 <.LVL131>:
 4e4:	4b 01       	movw	r8, r22

000004e6 <.Loc.338>:
 4e6:	5c 01       	movw	r10, r24

000004e8 <.Loc.339>:

		intermediate.r = g;
 4e8:	b2 01       	movw	r22, r4
 4ea:	c3 01       	movw	r24, r6
 4ec:	18 d1       	rcall	.+560    	; 0x71e <__fixunssfsi>

000004ee <.LVL134>:
 4ee:	6a 83       	std	Y+2, r22	; 0x02

000004f0 <.Loc.341>:
		intermediate.g = b;
 4f0:	b4 01       	movw	r22, r8
 4f2:	c5 01       	movw	r24, r10
 4f4:	14 d1       	rcall	.+552    	; 0x71e <__fixunssfsi>

000004f6 <.LVL135>:
 4f6:	6b 83       	std	Y+3, r22	; 0x03

000004f8 <.Loc.343>:
		intermediate.b = r;
 4f8:	b6 01       	movw	r22, r12
 4fa:	c7 01       	movw	r24, r14
 4fc:	10 d1       	rcall	.+544    	; 0x71e <__fixunssfsi>

000004fe <.LVL136>:
 4fe:	69 83       	std	Y+1, r22	; 0x01

00000500 <.LBB668>:
        target &= ~mBv(bitNumber); }
 500:	c0 98       	cbi	0x18, 0	; 24

00000502 <.LBB676>:
        target |= mBv(bitNumber); }
 502:	b8 9a       	sbi	0x17, 0	; 23

00000504 <.LBE670>:
template <const pin_t & pin, u16 len>
struct WS2812b {
		void send(const u24 * color) {
				u16 v_len = len;
		    ow_pin.oupinLo();
		    cli();      //disable interrupts
 504:	f8 94       	cli

00000506 <.Loc.352>:
 506:	89 e0       	ldi	r24, 0x09	; 9
 508:	90 e0       	ldi	r25, 0x00	; 0

0000050a <.L32>:
		    //Sends LEDS count times
		    while(v_len--) {
		        //Sends a color to a single LED
		        //increments 'colors' pointer to colors->next
		        asm volatile(
 50a:	ed 81       	ldd	r30, Y+5	; 0x05
 50c:	fe 81       	ldd	r31, Y+6	; 0x06
 50e:	01 90       	ld	r0, Z+
 510:	05 d0       	rcall	.+10     	; 0x51c <send_led_strip_byte1597>
 512:	01 90       	ld	r0, Z+
 514:	03 d0       	rcall	.+6      	; 0x51c <send_led_strip_byte1597>
 516:	00 80       	ld	r0, Z
 518:	01 d0       	rcall	.+2      	; 0x51c <send_led_strip_byte1597>
 51a:	11 c0       	rjmp	.+34     	; 0x53e <led_strip_asm_end1597>

0000051c <send_led_strip_byte1597>:
 51c:	07 d0       	rcall	.+14     	; 0x52c <send_led_strip_bit1597>
 51e:	06 d0       	rcall	.+12     	; 0x52c <send_led_strip_bit1597>
 520:	05 d0       	rcall	.+10     	; 0x52c <send_led_strip_bit1597>
 522:	04 d0       	rcall	.+8      	; 0x52c <send_led_strip_bit1597>
 524:	03 d0       	rcall	.+6      	; 0x52c <send_led_strip_bit1597>
 526:	02 d0       	rcall	.+4      	; 0x52c <send_led_strip_bit1597>
 528:	01 d0       	rcall	.+2      	; 0x52c <send_led_strip_bit1597>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <send_led_strip_bit1597>

0000052c <send_led_strip_bit1597>:
 52c:	00 1c       	adc	r0, r0
 52e:	c1 9a       	sbi	0x18, 1	; 24
 530:	08 f0       	brcs	.+2      	; 0x534 <.LLST86>

00000532 <L0^A>:
 532:	c1 98       	cbi	0x18, 1	; 24
 534:	00 00       	nop
 536:	00 00       	nop
 538:	08 f4       	brcc	.+2      	; 0x53c <L0^A+0x2>

0000053a <L0^A>:
 53a:	c1 98       	cbi	0x18, 1	; 24
 53c:	08 95       	ret

0000053e <led_strip_asm_end1597>:
		    while(v_len--) {
 53e:	01 97       	sbiw	r24, 0x01	; 1

00000540 <.Loc.355>:
 540:	21 f7       	brne	.-56     	; 0x50a <.L32>

00000542 <.Loc.356>:
		            : [col] "z" (color),
		        		  [port] "I" (&pin.PORTx - __SFR_OFFSET),
		        		  [pin] "I" (pin.pinN)
		        );
		    }
		    sei();      //re-enable interrupts
 542:	78 94       	sei

00000544 <.LBE668>:
	for(iRange(steps)) {
 544:	3a 94       	dec	r3

00000546 <.Loc.360>:
 546:	09 f0       	breq	.+2      	; 0x54a <.Loc.361>

00000548 <L0^A>:
 548:	96 cf       	rjmp	.-212    	; 0x476 <.L31>

0000054a <.Loc.361>:

	  leds.send(&intermediate.value);
	}

	last_color = new_color;
 54a:	20 92 69 00 	sts	0x0069, r2	; 0x800069 <last_color>
 54e:	bf 81       	ldd	r27, Y+7	; 0x07
 550:	b0 93 6a 00 	sts	0x006A, r27	; 0x80006a <last_color+0x1>
 554:	e8 85       	ldd	r30, Y+8	; 0x08
 556:	e0 93 6b 00 	sts	0x006B, r30	; 0x80006b <last_color+0x2>
 55a:	ff 85       	ldd	r31, Y+15	; 0x0f
 55c:	f0 93 6c 00 	sts	0x006C, r31	; 0x80006c <last_color+0x3>

00000560 <.Loc.363>:
  const s8 cero = 0;
  s8 temp = std::min(std::max(cero, tempSensor.getTemp()), (s8)(n_colors-1));
  color_t temp_color = {inFlashArray(colors)[temp]};
  U32 test = 15;

  while(test--){
 560:	0f 5f       	subi	r16, 0xFF	; 255
 562:	1f 4f       	sbci	r17, 0xFF	; 255
 564:	0f 30       	cpi	r16, 0x0F	; 15
 566:	11 05       	cpc	r17, r1
 568:	09 f0       	breq	.+2      	; 0x56c <.Loc.366>

0000056a <L0^A>:
 56a:	32 cf       	rjmp	.-412    	; 0x3d0 <.L34>

0000056c <.Loc.366>:
 56c:	82 e3       	ldi	r24, 0x32	; 50
 56e:	90 e0       	ldi	r25, 0x00	; 0

00000570 <.L35>:
 570:	af ec       	ldi	r26, 0xCF	; 207
 572:	b7 e0       	ldi	r27, 0x07	; 7

00000574 <.L1^B17>:
 574:	11 97       	sbiw	r26, 0x01	; 1
 576:	f1 f7       	brne	.-4      	; 0x574 <.L1^B17>
 578:	00 c0       	rjmp	.+0      	; 0x57a <L0^A>

0000057a <L0^A>:
	...

0000057c <.LBE686>:
 57c:	01 97       	sbiw	r24, 0x01	; 1

0000057e <.Loc.379>:
 57e:	c1 f7       	brne	.-16     	; 0x570 <.L35>
 580:	b0 ce       	rjmp	.-672    	; 0x2e2 <.L36>

00000582 <.L17>:
        ((u8*)&target) [bitNumber >> 3] &= ~mBv(bitNumber & 0x07); }
 582:	81 2f       	mov	r24, r17

00000584 <.Loc.382>:
 584:	87 70       	andi	r24, 0x07	; 7

00000586 <.Loc.383>:
 586:	a7 01       	movw	r20, r14
 588:	96 01       	movw	r18, r12
 58a:	04 c0       	rjmp	.+8      	; 0x594 <.L2^B1>

0000058c <.L1^B18>:
 58c:	22 0f       	add	r18, r18
 58e:	33 1f       	adc	r19, r19
 590:	44 1f       	adc	r20, r20
 592:	55 1f       	adc	r21, r21

00000594 <.L2^B1>:
 594:	8a 95       	dec	r24
 596:	d2 f7       	brpl	.-12     	; 0x58c <.L1^B18>
 598:	da 01       	movw	r26, r20
 59a:	c9 01       	movw	r24, r18

0000059c <.Loc.384>:
 59c:	e1 2f       	mov	r30, r17
 59e:	e6 95       	lsr	r30
 5a0:	e6 95       	lsr	r30
 5a2:	e6 95       	lsr	r30
 5a4:	f0 e0       	ldi	r31, 0x00	; 0

000005a6 <.Loc.385>:
 5a6:	e0 5a       	subi	r30, 0xA0	; 160
 5a8:	ff 4f       	sbci	r31, 0xFF	; 255
 5aa:	20 81       	ld	r18, Z

000005ac <.Loc.386>:
      if (to == 0) {
 5ac:	b1 10       	cpse	r11, r1
 5ae:	0e c0       	rjmp	.+28     	; 0x5cc <.L21>

000005b0 <.Loc.387>:
        ((u8*)&target) [bitNumber >> 3] &= ~mBv(bitNumber & 0x07); }
 5b0:	80 95       	com	r24
 5b2:	90 95       	com	r25
 5b4:	a0 95       	com	r26
 5b6:	b0 95       	com	r27
 5b8:	82 23       	and	r24, r18

000005ba <.L22>:
 5ba:	80 83       	st	Z, r24

000005bc <.Loc.388>:
				searchDirection= lastBit;}
			else {
				searchDirection= (i == lastDiscrepancy);}}

		targetID.u[i]= searchDirection;
		writeBits(searchDirection, 1);
 5bc:	61 e0       	ldi	r22, 0x01	; 1
 5be:	80 2f       	mov	r24, r16
 5c0:	c2 dd       	rcall	.-1148   	; 0x146 <_ZN12oneWireBus_c9writeBitsEhh.isra.0>

000005c2 <.LVL153>:
	for( iRange(64) ) {
 5c2:	1f 5f       	subi	r17, 0xFF	; 255

000005c4 <.Loc.391>:
 5c4:	10 34       	cpi	r17, 0x40	; 64
 5c6:	09 f0       	breq	.+2      	; 0x5ca <L0^A+0x2>

000005c8 <L0^A>:
 5c8:	43 ce       	rjmp	.-890    	; 0x250 <.L23>
 5ca:	51 ce       	rjmp	.-862    	; 0x26e <.L24>

000005cc <.L21>:
        ((u8*)&target) [bitNumber >> 3] |= mBv(bitNumber & 0x07); }
 5cc:	82 2b       	or	r24, r18
 5ce:	f5 cf       	rjmp	.-22     	; 0x5ba <.L22>

000005d0 <.L27>:
 5d0:	ef ec       	ldi	r30, 0xCF	; 207
 5d2:	f7 e0       	ldi	r31, 0x07	; 7

000005d4 <.L1^B19>:
 5d4:	31 97       	sbiw	r30, 0x01	; 1
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <.L1^B19>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <L0^A>

000005da <L0^A>:
	...

000005dc <.Loc.403>:
 5dc:	01 50       	subi	r16, 0x01	; 1
 5de:	11 09       	sbc	r17, r1

000005e0 <.Loc.404>:
}
 5e0:	b0 ce       	rjmp	.-672    	; 0x342 <.L26>

000005e2 <.L29>:
    const u8 * flash_p = base_addr + size * index;
 5e2:	67 ff       	sbrs	r22, 7
 5e4:	d4 ce       	rjmp	.-600    	; 0x38e <.L30>
 5e6:	60 e0       	ldi	r22, 0x00	; 0
 5e8:	d2 ce       	rjmp	.-604    	; 0x38e <.L30>

000005ea <_sub_I_65535_0.0>:
 5ea:	ed e6       	ldi	r30, 0x6D	; 109
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	12 86       	std	Z+10, r1	; 0x0a
 5f0:	13 86       	std	Z+11, r1	; 0x0b
 5f2:	14 86       	std	Z+12, r1	; 0x0c
 5f4:	15 86       	std	Z+13, r1	; 0x0d
 5f6:	16 86       	std	Z+14, r1	; 0x0e
 5f8:	17 86       	std	Z+15, r1	; 0x0f
 5fa:	10 8a       	std	Z+16, r1	; 0x10
 5fc:	11 8a       	std	Z+17, r1	; 0x11
 5fe:	e0 e6       	ldi	r30, 0x60	; 96
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	10 82       	st	Z, r1
 604:	11 82       	std	Z+1, r1	; 0x01
 606:	12 82       	std	Z+2, r1	; 0x02
 608:	13 82       	std	Z+3, r1	; 0x03
 60a:	14 82       	std	Z+4, r1	; 0x04
 60c:	15 82       	std	Z+5, r1	; 0x05
 60e:	16 82       	std	Z+6, r1	; 0x06
 610:	17 82       	std	Z+7, r1	; 0x07
 612:	08 95       	ret

00000614 <__mulhi3>:
 614:	00 24       	eor	r0, r0

00000616 <.Loc.1>:
 616:	55 27       	eor	r21, r21

00000618 <.Loc.2>:
 618:	04 c0       	rjmp	.+8      	; 0x622 <.L3^B1>

0000061a <.L1^B1>:
 61a:	08 0e       	add	r0, r24

0000061c <.Loc.4>:
 61c:	59 1f       	adc	r21, r25

0000061e <.L2^B1>:
 61e:	88 0f       	add	r24, r24

00000620 <.Loc.6>:
 620:	99 1f       	adc	r25, r25

00000622 <.L3^B1>:
 622:	00 97       	sbiw	r24, 0x00	; 0

00000624 <.Loc.8>:
 624:	29 f0       	breq	.+10     	; 0x630 <.L9^B1>

00000626 <.Loc.9>:
 626:	76 95       	lsr	r23

00000628 <.Loc.10>:
 628:	67 95       	ror	r22

0000062a <.Loc.11>:
 62a:	b8 f3       	brcs	.-18     	; 0x61a <.L1^B1>

0000062c <.Loc.12>:
 62c:	71 05       	cpc	r23, r1

0000062e <.Loc.13>:
 62e:	b9 f7       	brne	.-18     	; 0x61e <.L2^B1>

00000630 <.L9^B1>:
 630:	80 2d       	mov	r24, r0

00000632 <.Loc.15>:
 632:	95 2f       	mov	r25, r21

00000634 <.Loc.16>:
 634:	08 95       	ret

00000636 <__tablejump2__>:
 636:	ee 0f       	add	r30, r30

00000638 <.Loc.1>:
 638:	ff 1f       	adc	r31, r31

0000063a <.Loc.2>:
 63a:	05 90       	lpm	r0, Z+

0000063c <.Loc.3>:
 63c:	f4 91       	lpm	r31, Z

0000063e <.Loc.4>:
 63e:	e0 2d       	mov	r30, r0

00000640 <.Loc.5>:
 640:	09 94       	ijmp

00000642 <memcpy_P>:
 642:	fb 01       	movw	r30, r22
 644:	dc 01       	movw	r26, r24
 646:	02 c0       	rjmp	.+4      	; 0x64c <memcpy_P+0xa>
 648:	05 90       	lpm	r0, Z+
 64a:	0d 92       	st	X+, r0
 64c:	41 50       	subi	r20, 0x01	; 1
 64e:	50 40       	sbci	r21, 0x00	; 0
 650:	d8 f7       	brcc	.-10     	; 0x648 <memcpy_P+0x6>
 652:	08 95       	ret

00000654 <__subsf3>:
 654:	50 58       	subi	r21, 0x80	; 128

00000656 <__addsf3>:
 656:	bb 27       	eor	r27, r27
 658:	aa 27       	eor	r26, r26
 65a:	0e d0       	rcall	.+28     	; 0x678 <__addsf3x>
 65c:	e0 c0       	rjmp	.+448    	; 0x81e <__fp_round>
 65e:	d1 d0       	rcall	.+418    	; 0x802 <__fp_pscA>
 660:	30 f0       	brcs	.+12     	; 0x66e <__addsf3+0x18>
 662:	d6 d0       	rcall	.+428    	; 0x810 <__fp_pscB>
 664:	20 f0       	brcs	.+8      	; 0x66e <__addsf3+0x18>
 666:	31 f4       	brne	.+12     	; 0x674 <__addsf3+0x1e>
 668:	9f 3f       	cpi	r25, 0xFF	; 255
 66a:	11 f4       	brne	.+4      	; 0x670 <__addsf3+0x1a>
 66c:	1e f4       	brtc	.+6      	; 0x674 <__addsf3+0x1e>
 66e:	c6 c0       	rjmp	.+396    	; 0x7fc <__fp_nan>
 670:	0e f4       	brtc	.+2      	; 0x674 <__addsf3+0x1e>
 672:	e0 95       	com	r30
 674:	e7 fb       	bst	r30, 7
 676:	bc c0       	rjmp	.+376    	; 0x7f0 <__fp_inf>

00000678 <__addsf3x>:
 678:	e9 2f       	mov	r30, r25
 67a:	e2 d0       	rcall	.+452    	; 0x840 <__fp_split3>
 67c:	80 f3       	brcs	.-32     	; 0x65e <__addsf3+0x8>
 67e:	ba 17       	cp	r27, r26
 680:	62 07       	cpc	r22, r18
 682:	73 07       	cpc	r23, r19
 684:	84 07       	cpc	r24, r20
 686:	95 07       	cpc	r25, r21
 688:	18 f0       	brcs	.+6      	; 0x690 <__addsf3x+0x18>
 68a:	71 f4       	brne	.+28     	; 0x6a8 <.LLST99+0x3>
 68c:	9e f5       	brtc	.+102    	; 0x6f4 <.LLST107+0x8>
 68e:	fa c0       	rjmp	.+500    	; 0x884 <__fp_zero>
 690:	0e f4       	brtc	.+2      	; 0x694 <__addsf3x+0x1c>
 692:	e0 95       	com	r30
 694:	0b 2e       	mov	r0, r27
 696:	ba 2f       	mov	r27, r26
 698:	a0 2d       	mov	r26, r0
 69a:	0b 01       	movw	r0, r22
 69c:	b9 01       	movw	r22, r18
 69e:	90 01       	movw	r18, r0
 6a0:	0c 01       	movw	r0, r24
 6a2:	ca 01       	movw	r24, r20
 6a4:	a0 01       	movw	r20, r0
 6a6:	11 24       	eor	r1, r1
 6a8:	ff 27       	eor	r31, r31
 6aa:	59 1b       	sub	r21, r25
 6ac:	99 f0       	breq	.+38     	; 0x6d4 <.LLST104+0x6>
 6ae:	59 3f       	cpi	r21, 0xF9	; 249
 6b0:	50 f4       	brcc	.+20     	; 0x6c6 <.LLST102+0x5>
 6b2:	50 3e       	cpi	r21, 0xE0	; 224
 6b4:	68 f1       	brcs	.+90     	; 0x710 <.LLST108+0x9>
 6b6:	1a 16       	cp	r1, r26
 6b8:	f0 40       	sbci	r31, 0x00	; 0
 6ba:	a2 2f       	mov	r26, r18
 6bc:	23 2f       	mov	r18, r19
 6be:	34 2f       	mov	r19, r20
 6c0:	44 27       	eor	r20, r20
 6c2:	58 5f       	subi	r21, 0xF8	; 248
 6c4:	f3 cf       	rjmp	.-26     	; 0x6ac <.LLST99+0x7>
 6c6:	46 95       	lsr	r20
 6c8:	37 95       	ror	r19
 6ca:	27 95       	ror	r18
 6cc:	a7 95       	ror	r26
 6ce:	f0 40       	sbci	r31, 0x00	; 0
 6d0:	53 95       	inc	r21
 6d2:	c9 f7       	brne	.-14     	; 0x6c6 <.LLST102+0x5>
 6d4:	7e f4       	brtc	.+30     	; 0x6f4 <.LLST107+0x8>
 6d6:	1f 16       	cp	r1, r31
 6d8:	ba 0b       	sbc	r27, r26
 6da:	62 0b       	sbc	r22, r18
 6dc:	73 0b       	sbc	r23, r19
 6de:	84 0b       	sbc	r24, r20
 6e0:	ba f0       	brmi	.+46     	; 0x710 <.LLST108+0x9>
 6e2:	91 50       	subi	r25, 0x01	; 1
 6e4:	a1 f0       	breq	.+40     	; 0x70e <.LLST108+0x7>
 6e6:	ff 0f       	add	r31, r31
 6e8:	bb 1f       	adc	r27, r27
 6ea:	66 1f       	adc	r22, r22
 6ec:	77 1f       	adc	r23, r23
 6ee:	88 1f       	adc	r24, r24
 6f0:	c2 f7       	brpl	.-16     	; 0x6e2 <.LLST106+0x4>
 6f2:	0e c0       	rjmp	.+28     	; 0x710 <.LLST108+0x9>
 6f4:	ba 0f       	add	r27, r26
 6f6:	62 1f       	adc	r22, r18
 6f8:	73 1f       	adc	r23, r19
 6fa:	84 1f       	adc	r24, r20
 6fc:	48 f4       	brcc	.+18     	; 0x710 <.LLST108+0x9>
 6fe:	87 95       	ror	r24
 700:	77 95       	ror	r23
 702:	67 95       	ror	r22
 704:	b7 95       	ror	r27
 706:	f7 95       	ror	r31
 708:	9e 3f       	cpi	r25, 0xFE	; 254
 70a:	08 f0       	brcs	.+2      	; 0x70e <.LLST108+0x7>
 70c:	b3 cf       	rjmp	.-154    	; 0x674 <__addsf3+0x1e>
 70e:	93 95       	inc	r25
 710:	88 0f       	add	r24, r24
 712:	08 f0       	brcs	.+2      	; 0x716 <.LVUS109+0x1>
 714:	99 27       	eor	r25, r25
 716:	ee 0f       	add	r30, r30
 718:	97 95       	ror	r25
 71a:	87 95       	ror	r24
 71c:	08 95       	ret

0000071e <__fixunssfsi>:
 71e:	98 d0       	rcall	.+304    	; 0x850 <__fp_splitA>
 720:	88 f0       	brcs	.+34     	; 0x744 <.LLST112+0xe>
 722:	9f 57       	subi	r25, 0x7F	; 127
 724:	90 f0       	brcs	.+36     	; 0x74a <.LLST112+0x14>
 726:	b9 2f       	mov	r27, r25
 728:	99 27       	eor	r25, r25
 72a:	b7 51       	subi	r27, 0x17	; 23
 72c:	a0 f0       	brcs	.+40     	; 0x756 <.LLST112+0x20>
 72e:	d1 f0       	breq	.+52     	; 0x764 <.LLST113>
 730:	66 0f       	add	r22, r22
 732:	77 1f       	adc	r23, r23
 734:	88 1f       	adc	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	1a f0       	brmi	.+6      	; 0x740 <.LLST112+0xa>
 73a:	ba 95       	dec	r27
 73c:	c9 f7       	brne	.-14     	; 0x730 <.LVUS112+0x2>
 73e:	12 c0       	rjmp	.+36     	; 0x764 <.LLST113>
 740:	b1 30       	cpi	r27, 0x01	; 1
 742:	81 f0       	breq	.+32     	; 0x764 <.LLST113>
 744:	9f d0       	rcall	.+318    	; 0x884 <__fp_zero>
 746:	b1 e0       	ldi	r27, 0x01	; 1
 748:	08 95       	ret
 74a:	9c c0       	rjmp	.+312    	; 0x884 <__fp_zero>
 74c:	67 2f       	mov	r22, r23
 74e:	78 2f       	mov	r23, r24
 750:	88 27       	eor	r24, r24
 752:	b8 5f       	subi	r27, 0xF8	; 248
 754:	39 f0       	breq	.+14     	; 0x764 <.LLST113>
 756:	b9 3f       	cpi	r27, 0xF9	; 249
 758:	cc f3       	brlt	.-14     	; 0x74c <.LLST112+0x16>
 75a:	86 95       	lsr	r24
 75c:	77 95       	ror	r23
 75e:	67 95       	ror	r22
 760:	b3 95       	inc	r27
 762:	d9 f7       	brne	.-10     	; 0x75a <.LLST112+0x24>
 764:	3e f4       	brtc	.+14     	; 0x774 <.LLST114>
 766:	90 95       	com	r25
 768:	80 95       	com	r24
 76a:	70 95       	com	r23
 76c:	61 95       	neg	r22
 76e:	7f 4f       	sbci	r23, 0xFF	; 255
 770:	8f 4f       	sbci	r24, 0xFF	; 255
 772:	9f 4f       	sbci	r25, 0xFF	; 255
 774:	08 95       	ret

00000776 <__floatunsisf>:
 776:	e8 94       	clt
 778:	09 c0       	rjmp	.+18     	; 0x78c <.LLST115+0x8>

0000077a <__floatsisf>:
 77a:	97 fb       	bst	r25, 7
 77c:	3e f4       	brtc	.+14     	; 0x78c <.LLST115+0x8>
 77e:	90 95       	com	r25
 780:	80 95       	com	r24
 782:	70 95       	com	r23
 784:	61 95       	neg	r22
 786:	7f 4f       	sbci	r23, 0xFF	; 255
 788:	8f 4f       	sbci	r24, 0xFF	; 255
 78a:	9f 4f       	sbci	r25, 0xFF	; 255
 78c:	99 23       	and	r25, r25
 78e:	a9 f0       	breq	.+42     	; 0x7ba <.LVUS119+0x1>
 790:	f9 2f       	mov	r31, r25
 792:	96 e9       	ldi	r25, 0x96	; 150
 794:	bb 27       	eor	r27, r27
 796:	93 95       	inc	r25
 798:	f6 95       	lsr	r31
 79a:	87 95       	ror	r24
 79c:	77 95       	ror	r23
 79e:	67 95       	ror	r22
 7a0:	b7 95       	ror	r27
 7a2:	f1 11       	cpse	r31, r1
 7a4:	f8 cf       	rjmp	.-16     	; 0x796 <.LLST116+0x4>
 7a6:	fa f4       	brpl	.+62     	; 0x7e6 <.LLST121+0xf>
 7a8:	bb 0f       	add	r27, r27
 7aa:	11 f4       	brne	.+4      	; 0x7b0 <.LLST118+0x2>
 7ac:	60 ff       	sbrs	r22, 0
 7ae:	1b c0       	rjmp	.+54     	; 0x7e6 <.LLST121+0xf>
 7b0:	6f 5f       	subi	r22, 0xFF	; 255
 7b2:	7f 4f       	sbci	r23, 0xFF	; 255
 7b4:	8f 4f       	sbci	r24, 0xFF	; 255
 7b6:	9f 4f       	sbci	r25, 0xFF	; 255
 7b8:	16 c0       	rjmp	.+44     	; 0x7e6 <.LLST121+0xf>
 7ba:	88 23       	and	r24, r24
 7bc:	11 f0       	breq	.+4      	; 0x7c2 <.LLST119+0x7>
 7be:	96 e9       	ldi	r25, 0x96	; 150
 7c0:	11 c0       	rjmp	.+34     	; 0x7e4 <.LLST121+0xd>
 7c2:	77 23       	and	r23, r23
 7c4:	21 f0       	breq	.+8      	; 0x7ce <.LLST120+0x3>
 7c6:	9e e8       	ldi	r25, 0x8E	; 142
 7c8:	87 2f       	mov	r24, r23
 7ca:	76 2f       	mov	r23, r22
 7cc:	05 c0       	rjmp	.+10     	; 0x7d8 <.LLST121+0x1>
 7ce:	66 23       	and	r22, r22
 7d0:	71 f0       	breq	.+28     	; 0x7ee <.LLST122+0x4>
 7d2:	96 e8       	ldi	r25, 0x86	; 134
 7d4:	86 2f       	mov	r24, r22
 7d6:	70 e0       	ldi	r23, 0x00	; 0
 7d8:	60 e0       	ldi	r22, 0x00	; 0
 7da:	2a f0       	brmi	.+10     	; 0x7e6 <.LLST121+0xf>
 7dc:	9a 95       	dec	r25
 7de:	66 0f       	add	r22, r22
 7e0:	77 1f       	adc	r23, r23
 7e2:	88 1f       	adc	r24, r24
 7e4:	da f7       	brpl	.-10     	; 0x7dc <.LLST121+0x5>
 7e6:	88 0f       	add	r24, r24
 7e8:	96 95       	lsr	r25
 7ea:	87 95       	ror	r24
 7ec:	97 f9       	bld	r25, 7
 7ee:	08 95       	ret

000007f0 <__fp_inf>:
 7f0:	97 f9       	bld	r25, 7
 7f2:	9f 67       	ori	r25, 0x7F	; 127
 7f4:	80 e8       	ldi	r24, 0x80	; 128
 7f6:	70 e0       	ldi	r23, 0x00	; 0
 7f8:	60 e0       	ldi	r22, 0x00	; 0
 7fa:	08 95       	ret

000007fc <__fp_nan>:
 7fc:	9f ef       	ldi	r25, 0xFF	; 255
 7fe:	80 ec       	ldi	r24, 0xC0	; 192
 800:	08 95       	ret

00000802 <__fp_pscA>:
 802:	00 24       	eor	r0, r0
 804:	0a 94       	dec	r0
 806:	16 16       	cp	r1, r22
 808:	17 06       	cpc	r1, r23
 80a:	18 06       	cpc	r1, r24
 80c:	09 06       	cpc	r0, r25
 80e:	08 95       	ret

00000810 <__fp_pscB>:
 810:	00 24       	eor	r0, r0
 812:	0a 94       	dec	r0
 814:	12 16       	cp	r1, r18
 816:	13 06       	cpc	r1, r19
 818:	14 06       	cpc	r1, r20
 81a:	05 06       	cpc	r0, r21
 81c:	08 95       	ret

0000081e <__fp_round>:
 81e:	09 2e       	mov	r0, r25
 820:	03 94       	inc	r0
 822:	00 0c       	add	r0, r0
 824:	11 f4       	brne	.+4      	; 0x82a <.LLST127+0x8>
 826:	88 23       	and	r24, r24
 828:	52 f0       	brmi	.+20     	; 0x83e <.LLST128+0x4>
 82a:	bb 0f       	add	r27, r27
 82c:	40 f4       	brcc	.+16     	; 0x83e <.LLST128+0x4>
 82e:	bf 2b       	or	r27, r31
 830:	11 f4       	brne	.+4      	; 0x836 <.LLST127+0x14>
 832:	60 ff       	sbrs	r22, 0
 834:	04 c0       	rjmp	.+8      	; 0x83e <.LLST128+0x4>
 836:	6f 5f       	subi	r22, 0xFF	; 255
 838:	7f 4f       	sbci	r23, 0xFF	; 255
 83a:	8f 4f       	sbci	r24, 0xFF	; 255
 83c:	9f 4f       	sbci	r25, 0xFF	; 255
 83e:	08 95       	ret

00000840 <__fp_split3>:
 840:	57 fd       	sbrc	r21, 7
 842:	90 58       	subi	r25, 0x80	; 128
 844:	44 0f       	add	r20, r20
 846:	55 1f       	adc	r21, r21
 848:	59 f0       	breq	.+22     	; 0x860 <__fp_splitA+0x10>
 84a:	5f 3f       	cpi	r21, 0xFF	; 255
 84c:	71 f0       	breq	.+28     	; 0x86a <__fp_splitA+0x1a>
 84e:	47 95       	ror	r20

00000850 <__fp_splitA>:
 850:	88 0f       	add	r24, r24
 852:	97 fb       	bst	r25, 7
 854:	99 1f       	adc	r25, r25
 856:	61 f0       	breq	.+24     	; 0x870 <__fp_splitA+0x20>
 858:	9f 3f       	cpi	r25, 0xFF	; 255
 85a:	79 f0       	breq	.+30     	; 0x87a <.LLST130+0x5>
 85c:	87 95       	ror	r24
 85e:	08 95       	ret
 860:	12 16       	cp	r1, r18
 862:	13 06       	cpc	r1, r19
 864:	14 06       	cpc	r1, r20
 866:	55 1f       	adc	r21, r21
 868:	f2 cf       	rjmp	.-28     	; 0x84e <.LLST129+0x4>
 86a:	46 95       	lsr	r20
 86c:	f1 df       	rcall	.-30     	; 0x850 <__fp_splitA>
 86e:	08 c0       	rjmp	.+16     	; 0x880 <.LLST130+0xb>
 870:	16 16       	cp	r1, r22
 872:	17 06       	cpc	r1, r23
 874:	18 06       	cpc	r1, r24
 876:	99 1f       	adc	r25, r25
 878:	f1 cf       	rjmp	.-30     	; 0x85c <__fp_splitA+0xc>
 87a:	86 95       	lsr	r24
 87c:	71 05       	cpc	r23, r1
 87e:	61 05       	cpc	r22, r1
 880:	08 94       	sec
 882:	08 95       	ret

00000884 <__fp_zero>:
 884:	e8 94       	clt

00000886 <__fp_szero>:
 886:	bb 27       	eor	r27, r27
 888:	66 27       	eor	r22, r22
 88a:	77 27       	eor	r23, r23
 88c:	cb 01       	movw	r24, r22
 88e:	97 f9       	bld	r25, 7
 890:	08 95       	ret

00000892 <__mulsf3>:
 892:	0a d0       	rcall	.+20     	; 0x8a8 <__mulsf3x>
 894:	c4 cf       	rjmp	.-120    	; 0x81e <__fp_round>
 896:	b5 df       	rcall	.-150    	; 0x802 <__fp_pscA>
 898:	28 f0       	brcs	.+10     	; 0x8a4 <.LLST131+0x4>
 89a:	ba df       	rcall	.-140    	; 0x810 <__fp_pscB>
 89c:	18 f0       	brcs	.+6      	; 0x8a4 <.LLST131+0x4>
 89e:	95 23       	and	r25, r21
 8a0:	09 f0       	breq	.+2      	; 0x8a4 <.LLST131+0x4>
 8a2:	a6 cf       	rjmp	.-180    	; 0x7f0 <__fp_inf>
 8a4:	ab cf       	rjmp	.-170    	; 0x7fc <__fp_nan>
 8a6:	ef cf       	rjmp	.-34     	; 0x886 <__fp_szero>

000008a8 <__mulsf3x>:
 8a8:	cb df       	rcall	.-106    	; 0x840 <__fp_split3>
 8aa:	a8 f3       	brcs	.-22     	; 0x896 <__mulsf3+0x4>

000008ac <__mulsf3_pse>:
 8ac:	99 23       	and	r25, r25
 8ae:	d9 f3       	breq	.-10     	; 0x8a6 <.LLST131+0x6>
 8b0:	55 23       	and	r21, r21
 8b2:	c9 f3       	breq	.-14     	; 0x8a6 <.LLST131+0x6>
 8b4:	95 0f       	add	r25, r21
 8b6:	50 e0       	ldi	r21, 0x00	; 0
 8b8:	55 1f       	adc	r21, r21
 8ba:	aa 27       	eor	r26, r26
 8bc:	ee 27       	eor	r30, r30
 8be:	ff 27       	eor	r31, r31
 8c0:	bb 27       	eor	r27, r27
 8c2:	00 24       	eor	r0, r0
 8c4:	08 94       	sec
 8c6:	67 95       	ror	r22
 8c8:	20 f4       	brcc	.+8      	; 0x8d2 <.LLST132+0x5>
 8ca:	e2 0f       	add	r30, r18
 8cc:	f3 1f       	adc	r31, r19
 8ce:	b4 1f       	adc	r27, r20
 8d0:	0a 1e       	adc	r0, r26
 8d2:	22 0f       	add	r18, r18
 8d4:	33 1f       	adc	r19, r19
 8d6:	44 1f       	adc	r20, r20
 8d8:	aa 1f       	adc	r26, r26
 8da:	66 95       	lsr	r22
 8dc:	a9 f7       	brne	.-22     	; 0x8c8 <.LVUS132+0x1>
 8de:	77 95       	ror	r23
 8e0:	30 f4       	brcc	.+12     	; 0x8ee <.LLST132+0x21>
 8e2:	f3 0f       	add	r31, r19
 8e4:	b4 1f       	adc	r27, r20
 8e6:	0a 1e       	adc	r0, r26
 8e8:	12 1e       	adc	r1, r18
 8ea:	08 f4       	brcc	.+2      	; 0x8ee <.LLST132+0x21>
 8ec:	63 95       	inc	r22
 8ee:	33 0f       	add	r19, r19
 8f0:	44 1f       	adc	r20, r20
 8f2:	aa 1f       	adc	r26, r26
 8f4:	22 1f       	adc	r18, r18
 8f6:	76 95       	lsr	r23
 8f8:	99 f7       	brne	.-26     	; 0x8e0 <.LLST132+0x13>
 8fa:	87 95       	ror	r24
 8fc:	20 f4       	brcc	.+8      	; 0x906 <.LLST132+0x39>
 8fe:	b4 0f       	add	r27, r20
 900:	0a 1e       	adc	r0, r26
 902:	12 1e       	adc	r1, r18
 904:	63 1f       	adc	r22, r19
 906:	44 0f       	add	r20, r20
 908:	aa 1f       	adc	r26, r26
 90a:	22 1f       	adc	r18, r18
 90c:	33 1f       	adc	r19, r19
 90e:	86 95       	lsr	r24
 910:	a9 f7       	brne	.-22     	; 0x8fc <.LLST132+0x2f>
 912:	86 2f       	mov	r24, r22
 914:	71 2d       	mov	r23, r1
 916:	60 2d       	mov	r22, r0
 918:	11 24       	eor	r1, r1
 91a:	9f 57       	subi	r25, 0x7F	; 127
 91c:	50 40       	sbci	r21, 0x00	; 0
 91e:	8a f0       	brmi	.+34     	; 0x942 <.LLST133+0x33>
 920:	e1 f0       	breq	.+56     	; 0x95a <.LLST134+0x5>
 922:	88 23       	and	r24, r24
 924:	4a f0       	brmi	.+18     	; 0x938 <.LLST133+0x29>
 926:	ee 0f       	add	r30, r30
 928:	ff 1f       	adc	r31, r31
 92a:	bb 1f       	adc	r27, r27
 92c:	66 1f       	adc	r22, r22
 92e:	77 1f       	adc	r23, r23
 930:	88 1f       	adc	r24, r24
 932:	91 50       	subi	r25, 0x01	; 1
 934:	50 40       	sbci	r21, 0x00	; 0
 936:	a9 f7       	brne	.-22     	; 0x922 <.LLST133+0x13>
 938:	9e 3f       	cpi	r25, 0xFE	; 254
 93a:	51 05       	cpc	r21, r1
 93c:	70 f0       	brcs	.+28     	; 0x95a <.LLST134+0x5>
 93e:	58 cf       	rjmp	.-336    	; 0x7f0 <__fp_inf>
 940:	a2 cf       	rjmp	.-188    	; 0x886 <__fp_szero>
 942:	5f 3f       	cpi	r21, 0xFF	; 255
 944:	ec f3       	brlt	.-6      	; 0x940 <.LLST133+0x31>
 946:	98 3e       	cpi	r25, 0xE8	; 232
 948:	dc f3       	brlt	.-10     	; 0x940 <.LLST133+0x31>
 94a:	86 95       	lsr	r24
 94c:	77 95       	ror	r23
 94e:	67 95       	ror	r22
 950:	b7 95       	ror	r27
 952:	f7 95       	ror	r31
 954:	e7 95       	ror	r30
 956:	9f 5f       	subi	r25, 0xFF	; 255
 958:	c1 f7       	brne	.-16     	; 0x94a <.LLST133+0x3b>
 95a:	fe 2b       	or	r31, r30
 95c:	88 0f       	add	r24, r24
 95e:	91 1d       	adc	r25, r1
 960:	96 95       	lsr	r25
 962:	87 95       	ror	r24
 964:	97 f9       	bld	r25, 7
 966:	08 95       	ret

00000968 <_exit>:
 968:	f8 94       	cli

0000096a <__stop_program>:
 96a:	ff cf       	rjmp	.-2      	; 0x96a <__stop_program>
